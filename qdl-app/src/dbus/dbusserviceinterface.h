/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c DBusServiceInterface -p dbusserviceinterface.h:dbusserviceinterface.cpp com.marxoft.QDL.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSSERVICEINTERFACE_H_1385680241
#define DBUSSERVICEINTERFACE_H_1385680241

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.marxoft.QDL
 */
class DBusServiceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.marxoft.QDL"; }

public:
    DBusServiceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusServiceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addUrls(const QStringList &urls)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(urls);
        return asyncCallWithArgumentList(QLatin1String("addUrls"), argumentList);
    }

    inline QDBusPendingReply<> addUrls(const QStringList &urls, const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(urls) << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QLatin1String("addUrls"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> getTransfer(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("getTransfer"), argumentList);
    }

    inline QDBusPendingReply<QDBusVariant> getTransferProperty(const QString &id, const QString &property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QLatin1String("getTransferProperty"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> getTransfers()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getTransfers"), argumentList);
    }

    inline QDBusPendingReply<> importUrls(const QStringList &urls)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(urls);
        return asyncCallWithArgumentList(QLatin1String("importUrls"), argumentList);
    }

    inline QDBusPendingReply<> importUrls(const QStringList &urls, const QString &service)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(urls) << QVariant::fromValue(service);
        return asyncCallWithArgumentList(QLatin1String("importUrls"), argumentList);
    }

    inline QDBusPendingReply<bool> pause(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("pause"), argumentList);
    }

    inline QDBusPendingReply<bool> pause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("pause"), argumentList);
    }

    inline QDBusPendingReply<bool> remove(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("remove"), argumentList);
    }

    inline QDBusPendingReply<> retrieveUrls(const QStringList &urls)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(urls);
        return asyncCallWithArgumentList(QLatin1String("retrieveUrls"), argumentList);
    }

    inline QDBusPendingReply<bool> setTransferProperty(const QString &id, const QString &property, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(property) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setTransferProperty"), argumentList);
    }

    inline QDBusPendingReply<bool> start(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QLatin1String("start"), argumentList);
    }

    inline QDBusPendingReply<bool> start()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("start"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace marxoft {
    typedef ::DBusServiceInterface QDL;
  }
}
#endif
