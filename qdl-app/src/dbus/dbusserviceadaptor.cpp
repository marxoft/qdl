/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c DBusServiceAdaptor -a dbusserviceadaptor.h:dbusserviceadaptor.cpp com.marxoft.QDL.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "dbusserviceadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class DBusServiceAdaptor
 */

DBusServiceAdaptor::DBusServiceAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

DBusServiceAdaptor::~DBusServiceAdaptor()
{
    // destructor
}

void DBusServiceAdaptor::addUrls(const QStringList &urls)
{
    // handle method call com.marxoft.QDL.addUrls
    QMetaObject::invokeMethod(parent(), "addUrls", Q_ARG(QStringList, urls));
}

void DBusServiceAdaptor::addUrls(const QStringList &urls, const QString &service)
{
    // handle method call com.marxoft.QDL.addUrls
    QMetaObject::invokeMethod(parent(), "addUrls", Q_ARG(QStringList, urls), Q_ARG(QString, service));
}

QVariantMap DBusServiceAdaptor::getTransfer(const QString &id)
{
    // handle method call com.marxoft.QDL.getTransfer
    QVariantMap downloads;
    QMetaObject::invokeMethod(parent(), "getTransfer", Q_RETURN_ARG(QVariantMap, downloads), Q_ARG(QString, id));
    return downloads;
}

QDBusVariant DBusServiceAdaptor::getTransferProperty(const QString &id, const QString &property)
{
    // handle method call com.marxoft.QDL.getTransferProperty
    QDBusVariant value;
    QMetaObject::invokeMethod(parent(), "getTransferProperty", Q_RETURN_ARG(QDBusVariant, value), Q_ARG(QString, id), Q_ARG(QString, property));
    return value;
}

QVariantList DBusServiceAdaptor::getTransfers()
{
    // handle method call com.marxoft.QDL.getTransfers
    QVariantList downloads;
    QMetaObject::invokeMethod(parent(), "getTransfers", Q_RETURN_ARG(QVariantList, downloads));
    return downloads;
}

void DBusServiceAdaptor::importUrls(const QStringList &urls)
{
    // handle method call com.marxoft.QDL.importUrls
    QMetaObject::invokeMethod(parent(), "importUrls", Q_ARG(QStringList, urls));
}

void DBusServiceAdaptor::importUrls(const QStringList &urls, const QString &service)
{
    // handle method call com.marxoft.QDL.importUrls
    QMetaObject::invokeMethod(parent(), "importUrls", Q_ARG(QStringList, urls), Q_ARG(QString, service));
}

bool DBusServiceAdaptor::pause(const QString &id)
{
    // handle method call com.marxoft.QDL.pause
    bool success;
    QMetaObject::invokeMethod(parent(), "pause", Q_RETURN_ARG(bool, success), Q_ARG(QString, id));
    return success;
}

bool DBusServiceAdaptor::pause()
{
    // handle method call com.marxoft.QDL.pause
    bool success;
    QMetaObject::invokeMethod(parent(), "pause", Q_RETURN_ARG(bool, success));
    return success;
}

bool DBusServiceAdaptor::remove(const QString &id)
{
    // handle method call com.marxoft.QDL.remove
    bool success;
    QMetaObject::invokeMethod(parent(), "remove", Q_RETURN_ARG(bool, success), Q_ARG(QString, id));
    return success;
}

void DBusServiceAdaptor::retrieveUrls(const QStringList &urls)
{
    // handle method call com.marxoft.QDL.retrieveUrls
    QMetaObject::invokeMethod(parent(), "retrieveUrls", Q_ARG(QStringList, urls));
}

bool DBusServiceAdaptor::setTransferProperty(const QString &id, const QString &property, const QDBusVariant &value)
{
    // handle method call com.marxoft.QDL.setTransferProperty
    bool success;
    QMetaObject::invokeMethod(parent(), "setTransferProperty", Q_RETURN_ARG(bool, success), Q_ARG(QString, id), Q_ARG(QString, property), Q_ARG(QDBusVariant, value));
    return success;
}

bool DBusServiceAdaptor::start(const QString &id)
{
    // handle method call com.marxoft.QDL.start
    bool success;
    QMetaObject::invokeMethod(parent(), "start", Q_RETURN_ARG(bool, success), Q_ARG(QString, id));
    return success;
}

bool DBusServiceAdaptor::start()
{
    // handle method call com.marxoft.QDL.start
    bool success;
    QMetaObject::invokeMethod(parent(), "start", Q_RETURN_ARG(bool, success));
    return success;
}

